import os
from crewai import Agent, Task, Crew
from langchain_groq import ChatGroq
from agents import create_agents
from ibm_watson import SpeechToTextV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
import json

# Environment variables for IBM Watson Speech to Text
SPEECH_TO_TEXT_APIKEY = 'GErgUWhCT3hFGFKgGU5hJOolMN1cKsPAiw3QNdopyWyw'
SPEECH_TO_TEXT_URL = 'https://api.us-south.speech-to-text.watson.cloud.ibm.com/instances/aae2d499-014d-4a56-be17-47fa5bfc86d4'

def get_user_inputs():
    """Collect user inputs for the nutrition plan."""
    print("Please provide the following details:")
    
    user_inputs = {
        "age": input("Age: ").strip(),
        "country": input("Country: ").strip(),
        "state": input("State: ").strip(),
        "health_goal": input("Health Goal (e.g., weight loss, muscle gain): ").strip(),
        "disease": input("Any specific disease (if none, type 'None'): ").strip(),
        "preferences": input("Dietary preferences (e.g., vegan, gluten-free): ").strip(),
        "allergies": input("Any allergies: ").strip(),
        "fitness_routine": input("Your current fitness routine: ").strip(),
        "image_path": input("Path to an image of your food/ingredients (if any, else press Enter): ").strip()
    }
    
    # Validate image path if provided
    if user_inputs["image_path"] and not os.path.exists(user_inputs["image_path"]):
        print(f"\n‚ö†Ô∏è Warning: Image file not found at {user_inputs['image_path']}.")
        print("Image analysis will be skipped.")
        user_inputs["image_path"] = ""
    
    return user_inputs

def create_tasks(user_inputs, planner, writer, editor, yoga_exercise_coach, regional_customizer, reporter):
    # ‚úÖ Task 1: Meal Plan Outline Task
    plan = Task(
        description=(
            f"Using the user's details:\n"
            f"- Age: {user_inputs['age']}\n- Country: {user_inputs['country']}\n- State: {user_inputs['state']}\n- Health Goal: {user_inputs['health_goal']}\n"
            f"- Disease: {user_inputs['disease']}\n- Dietary Preferences: {user_inputs['preferences']}\n- Allergies: {user_inputs['allergies']}\n- Fitness Routine: {user_inputs['fitness_routine']}\n\n"
            "Create a nutrition plan outline with the following format:\n\n"
            "### Nutrition Plan Outline\n"
            "1. Number of Meals per Day: ...\n"
            "2. Food Groups to Include: ...\n"
            "3. Foods to Avoid: ...\n"
            "4. Caloric & Macronutrient Targets: ...\n"
            "5. Meal Timing Recommendations: ...\n"
            "6. Food Swap Suggestions: ..."
        ),
        expected_output="A structured markdown-style Nutrition Plan Outline.",
        agent=planner
    )

    # ü•ò Task 2: Meal Plan Generation Task
    write = Task(
        description=(
            "Using the provided Nutrition Plan Outline, generate a **28-Day Meal Plan** in the following format:\n\n"
            "### 28-Day Meal Plan\n"
            "**Day 1:**\n"
            "- Breakfast: [Item] | [Portion] | [Calories]\n"
            "- Lunch: [Item] | [Portion] | [Calories]\n"
            "- Snack: ...\n"
            "- Dinner: ...\n\n"
            "Repeat for all 28 days ensuring variety, allergies, and goal alignment."
        ),
        expected_output="A cleanly formatted, day-wise meal plan in markdown style.",
        agent=writer
    )

    # üìä Task 3: Nutrition Analysis Task
    edit = Task(
        description=(
            "Review the generated 28-Day Meal Plan and create a structured analysis with:\n\n"
            "### Nutrition Analysis\n"
            "1. Balance Review:\n"
            "- Carb/Protein/Fat distribution\n"
            "- Micronutrient coverage\n"
            "- Cultural adaptability\n\n"
            "2. Reasoning Behind Major Choices:\n"
            "- Example: Why oats in breakfast?\n\n"
            "3. Improvement Suggestions:\n"
            "- Suggest 2-3 smart adjustments."
        ),
        expected_output="A structured markdown-style Nutrition Analysis.",
        agent=editor
    )

    # üßò Task 4: Yoga & Exercise Plan Task
    yoga_task = Task(
        description=(
            f"Create a **7-day yoga and exercise plan** for a {user_inputs['age']} year old aiming for {user_inputs['health_goal']}.\n\n"
            "### 7-Day Yoga & Exercise Plan\n"
            "- Day 1: [Exercise] | [Duration] | [Focus Area]\n"
            "- Day 2: [Exercise] | [Duration] | [Focus Area]\n"
            "- Day 3: ...\n\n"
            f"Adapt based on user's routine: {user_inputs['fitness_routine']} and medical limitations: {user_inputs['disease']}."
        ),
        expected_output="A personalized 7-day yoga and exercise plan.",
        agent=yoga_exercise_coach
    )

    # üçΩÔ∏è Task 5: Regional Meal Customization Task
    regional_task = Task(
        description=(
            f"Adjust the meal plan based on regional preferences for {user_inputs['state']}, {user_inputs['country']}. Suggest 5 culturally relevant meal options.\n\n"
            "Ensure dietary preferences and allergies are considered."
        ),
        expected_output="5 regionally appropriate meal options with cultural relevance.",
        agent=regional_customizer
    )

    # üìë Task 6: Final Report Compilation Task
    report = Task(
        description=(
            f"Combine all outputs into a **Final Nutrition Report** in this format:\n\n"
            "# Final Nutrition Report\n"
            f"## User Details\n"
            f"- Age: {user_inputs['age']}\n- Country: {user_inputs['country']}\n- State: {user_inputs['state']}\n\n"
            "## Nutrition Plan Outline\n"
            "[From Task 1]\n\n"
            "## 28-Day Meal Plan\n"
            "[From Task 2]\n\n"
            "## Nutrition Analysis\n"
            "[From Task 3]\n\n"
            "## Yoga & Exercise Plan\n"
            "[From Task 4]\n\n"
            "## Regional Meal Customization\n"
            "[From Task 5]\n\n"
            "## Final Remarks\n"
            "- Summary advice and motivation."
        ),
        expected_output="A cleanly formatted Final Nutrition Report.",
        agent=reporter
    )

    return [plan, write, edit, yoga_task, regional_task, report]

def main():
    try:
        # Get user inputs
        user_inputs = get_user_inputs()

        # Initialize Speech to Text service
        stt_service = initialize_speech_to_text(SPEECH_TO_TEXT_APIKEY, SPEECH_TO_TEXT_URL)

        # Create agents
        planner, writer, editor, yoga_exercise_coach, regional_customizer, reporter = create_agents(user_inputs)

        # Create tasks with the agents and user inputs
        tasks = create_tasks(user_inputs, planner, writer, editor, yoga_exercise_coach, regional_customizer, reporter)

        # Create and run the crew
        crew = Crew(
            agents=[planner, writer, editor, yoga_exercise_coach, regional_customizer, reporter],
            tasks=tasks,
            verbose=2
        )

    # Get the final result
    result = crew.kickoff()

    # Print the final result
    print("\n\nüìù Final Nutrition Report:\n")
    print(result)

if __name__ == "__main__":
    main()
